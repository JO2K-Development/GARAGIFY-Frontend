/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/auth/access": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Authenticate using a Google token */
        post: operations["authenticateWithGoogle"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Refresh JWT token */
        post: operations["refreshToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        TokenVerificationForm: {
            token: string;
        };
        TokenDto: {
            access: string;
            refresh: string;
        };
        /** @enum {string} */
        ObstacleType: "tree" | "area";
        SpotSize: {
            width: number;
            height: number;
        };
        ParkingGroupMeta: {
            id: string;
            spotCount: number;
            spotSize: components["schemas"]["SpotSize"];
            spotAngle: number;
        };
        /** @description Serialized fabric.Line representation */
        FabricLine: {
            /** @example line */
            type?: string;
            points?: number[];
        };
        /** @description Serialized fabric.Rect representation */
        FabricRect: {
            /** @example rect */
            type?: string;
            left?: number;
            top?: number;
            width?: number;
            height?: number;
        };
        /** @description Serialized fabric.Object representation */
        FabricObject: {
            type?: string;
        };
        ParkingSpotGroup: components["schemas"]["ParkingGroupMeta"] & {
            line?: components["schemas"]["FabricLine"];
            spots?: components["schemas"]["FabricRect"][];
        };
        CanvasObstacle: {
            id: string;
            type: components["schemas"]["ObstacleType"];
            fabricObject: components["schemas"]["FabricObject"];
        };
        CanvasZone: {
            id: string;
            name?: string;
            fabricObject: components["schemas"]["FabricObject"];
        };
        ParkingMap: {
            zones: components["schemas"]["CanvasZone"][];
            obstacles: components["schemas"]["CanvasObstacle"][];
            spotGroups: components["schemas"]["ParkingSpotGroup"][];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    authenticateWithGoogle: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TokenVerificationForm"];
            };
        };
        responses: {
            /** @description JWT tokens returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenDto"];
                };
            };
        };
    };
    refreshToken: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TokenVerificationForm"];
            };
        };
        responses: {
            /** @description New JWT tokens returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenDto"];
                };
            };
        };
    };
}
