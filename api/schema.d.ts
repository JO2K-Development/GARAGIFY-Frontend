/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/auth/access": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Authenticate using a Google token */
        post: operations["authenticateWithGoogle"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Refresh JWT token */
        post: operations["refreshToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/parkings/{parking_id}/lend/{spot_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Borrow a specific parking spot */
        post: operations["createLendForSpot"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lend/mine": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all borrows for the current user (paged) */
        get: operations["getMyLends"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lend/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete a borrow by its ID
         * @description Deletes the lend resource with the given UUID.
         */
        delete: operations["deleteParkingLend"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/parkings/{parking_id}/borrow/{spot_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Borrow a specific parking spot */
        post: operations["createBorrowForSpot"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/borrow/mine": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all borrows for the current user (paged) */
        get: operations["getMyBorrows"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/borrow/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete a borrow by its ID
         * @description Deletes the borrow resource with the given UUID.
         */
        delete: operations["deleteParkingBorrow"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/parkings/{parking_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get parking by id */
        get: operations["getParking"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/parkings/{parking_id}/lend/available-timeranges": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get available time ranges for lending a parking spot
         * @description Returns an array of available time ranges during which a parking spot can be lent up to the given date.
         */
        get: operations["getAvailableLendTimeRanges"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/parkings/{parking_id}/lend/available-spots": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get available parking spot UUIDs for lending in a given time range
         * @description Returns a list of spot UUIDs that are available to lend for the entire given time range.
         */
        get: operations["getAvailableLendSpots"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/parkings/{parking_id}/borrow/available-timeranges": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get available time ranges for borrowing a parking spot
         * @description Returns an array of available time ranges during which a parking spot can be borrowed up to the given date.
         */
        get: operations["getAvailableBorrowTimeRanges"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/parkings/{parking_id}/borrow/available-spots": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get available parking spot UUIDs for a given time range
         * @description Returns a list of spot UUIDs that are available for the entire given time range.
         */
        get: operations["getAvailableBorrowSpots"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lend-offer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Lend offers by filters
         * @description This is a description
         */
        get: operations["getAllLendOffers"];
        put?: never;
        /**
         * Create a lend offer
         * @description This is a description
         */
        post: operations["createLendOffer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lend-offer/{lend_offer_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Lend offer by id
         * @description This is a description
         */
        get: operations["getLendOfferById"];
        /**
         * Update lend offer by id
         * @description Update an existing lend offer
         */
        put: operations["updateLendOfferById"];
        post?: never;
        /**
         * Lend offer by id
         * @description This is a description
         */
        delete: operations["deleteLendOfferById"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        TimeRangeRequest: {
            /**
             * Format: date-time
             * @example 2025-06-01T08:00:00+02:00
             */
            fromWhen: string;
            /**
             * Format: date-time
             * @example 2025-06-01T10:00:00+02:00
             */
            untilWhen: string;
        };
        TokenVerificationForm: {
            token: string;
        };
        TokenDto: {
            access: string;
            refresh: string;
        };
        /** @description This is the borrow model */
        BorrowDTO: {
            /** @description Id of borrow */
            id?: string;
            /** @description Id of the parking */
            parking_id?: number;
            /** @description Id of parking spot */
            spot_id?: string;
            /**
             * Format: date-time
             * @description Start date of borrow
             */
            start_date?: string;
            /**
             * Format: date-time
             * @description End date of borrow
             */
            end_date?: string;
        };
        BorrowForm: {
            /** Format: uuid */
            spotId: string;
            /** Format: date-time */
            startDate: string;
            /** Format: date-time */
            endDate: string;
        };
        /** @description This is the lend offer model */
        LendOfferDTO: {
            /** @description Id of lend offer */
            id?: string;
            /**
             * Format: date-time
             * @description Start date of lend offer
             */
            start_date?: string;
            /**
             * Format: date-time
             * @description End date of lend offer
             */
            end_date?: string;
            /** @description Id of the parking */
            parking_id?: number;
            /** @description Id of parking spot */
            spot_id?: string;
        };
        /** @description This is the lend offer put model */
        LendOfferPutForm: {
            /**
             * Format: date-time
             * @description Start date of lend offer
             */
            start_date: string;
            /**
             * Format: date-time
             * @description End date of lend offer
             */
            end_date: string;
            /** @description Id of parking spot */
            spot_id: string;
            /** @description Id of user */
            owner_id?: string;
        };
        /** @description This is the lend offer model */
        LendOfferPostForm: {
            /**
             * Format: date-time
             * @description Start date of lend offer
             */
            start_date: string;
            /**
             * Format: date-time
             * @description End date of lend offer
             */
            end_date: string;
            /** @description Id of parking spot */
            spot_id: string;
        };
        /** @description This is the parking model (read-only) */
        ParkingDTO: {
            /**
             * Format: int32
             * @description Unique parking identifier
             */
            id: number;
            /**
             * Format: int32
             * @description Id of the organisation (foreign key)
             */
            organisation_id: number;
            /** @description The name of the parking */
            name: string;
            /** @description UI JSON data (arbitrary structure) */
            ui_object: Record<string, never>;
        };
        ParkingSpotDTO: {
            /**
             * Format: int32
             * @description Unique spot identifier
             */
            id: number;
            /**
             * Format: int32
             * @description Id of the parent parking
             */
            parking_id: number;
            /**
             * Format: uuid
             * @description UUID of the parking spot
             */
            spot_uuid: string;
            /**
             * Format: uuid
             * @description Owner's user id (nullable if no owner)
             */
            owner_id?: string;
            /** @description Status of the parking spot (optional) */
            status?: string;
        };
        TimeRangeDto: {
            /**
             * Format: date-time
             * @example 2025-06-01T08:00:00
             */
            start: string;
            /**
             * Format: date-time
             * @example 2025-06-01T12:00:00
             */
            end: string;
        };
        LendOfferListDTO: components["schemas"]["PagedResponse"] & {
            content?: components["schemas"]["LendOfferDTO"][];
        };
        BorrowListDTO: components["schemas"]["PagedResponse"] & {
            content?: components["schemas"]["BorrowDTO"][];
        };
        /** @description Generic paginated response wrapper */
        PagedResponse: {
            /** @description List of items for current page */
            content: unknown[];
            /**
             * Format: int64
             * @description Total number of elements across all pages
             * @example 3
             */
            totalElements: number;
            /**
             * Format: int32
             * @description Total number of pages
             * @example 1
             */
            totalPages: number;
            /**
             * Format: int32
             * @description Current page number (0-based)
             * @example 0
             */
            page: number;
            /**
             * Format: int32
             * @description Number of elements per page
             * @example 10
             */
            size: number;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    authenticateWithGoogle: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TokenVerificationForm"];
            };
        };
        responses: {
            /** @description JWT tokens returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenDto"];
                };
            };
        };
    };
    refreshToken: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TokenVerificationForm"];
            };
        };
        responses: {
            /** @description New JWT tokens returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenDto"];
                };
            };
        };
    };
    createLendForSpot: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                parking_id: number;
                spot_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TimeRangeRequest"];
            };
        };
        responses: {
            /** @description Borrow created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LendOfferDTO"];
                };
            };
        };
    };
    getMyLends: {
        parameters: {
            query?: {
                /** @description Page number (0-based) */
                page?: number;
                /** @description Page size */
                size?: number;
                /** @description Sort order (e.g., borrowTime,asc) */
                sort?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LendOfferListDTO"];
                };
            };
        };
    };
    deleteParkingLend: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description UUID of the lend to delete */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Borrow deleted successfully, no content returned */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createBorrowForSpot: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                parking_id: number;
                spot_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TimeRangeRequest"];
            };
        };
        responses: {
            /** @description Borrow created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BorrowDTO"];
                };
            };
        };
    };
    getMyBorrows: {
        parameters: {
            query?: {
                /** @description Page number (0-based) */
                page?: number;
                /** @description Page size */
                size?: number;
                /** @description Sort order (e.g., borrowTime,asc) */
                sort?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BorrowListDTO"];
                };
            };
        };
    };
    deleteParkingBorrow: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description UUID of the borrow to delete */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Borrow deleted successfully, no content returned */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getParking: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                parking_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ParkingDTO"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAvailableLendTimeRanges: {
        parameters: {
            query: {
                /** @description Date (inclusive) until when the parking spot can be lent. */
                untilWhen: string;
            };
            header?: never;
            path: {
                parking_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Array of available time ranges */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TimeRangeDto"][];
                };
            };
        };
    };
    getAvailableLendSpots: {
        parameters: {
            query: {
                /** @description Start of the time range (with offset) */
                from: string;
                /** @description End of the time range (with offset) */
                until: string;
            };
            header?: never;
            path: {
                parking_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of available spot UUIDs */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
        };
    };
    getAvailableBorrowTimeRanges: {
        parameters: {
            query: {
                /** @description Date (inclusive) until when the parking spot can be borrowed. */
                untilWhen: string;
            };
            header?: never;
            path: {
                parking_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Array of available time ranges */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TimeRangeDto"][];
                };
            };
        };
    };
    getAvailableBorrowSpots: {
        parameters: {
            query: {
                /** @description Start of the time range (with offset) */
                from: string;
                /** @description End of the time range (with offset) */
                until: string;
            };
            header?: never;
            path: {
                parking_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of available spot UUIDs */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
        };
    };
    getAllLendOffers: {
        parameters: {
            query?: {
                /** @description Page number (zero-based) */
                page?: number;
                /** @description Number of items per page */
                size?: number;
                /** @description Start date for the date range filter (inclusive) */
                start_date?: string;
                /** @description End date for the date range filter (inclusive) */
                end_date?: string;
                /** @description The id of the owner to filter by */
                owner_id?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description This means its ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LendOfferListDTO"];
                };
            };
        };
    };
    createLendOffer: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LendOfferPostForm"];
            };
        };
        responses: {
            /** @description This means its ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LendOfferDTO"];
                };
            };
        };
    };
    getLendOfferById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id of the lend offer */
                lend_offer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description This means its ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LendOfferDTO"];
                };
            };
        };
    };
    updateLendOfferById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id of the lend offer */
                lend_offer_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LendOfferPutForm"];
            };
        };
        responses: {
            /** @description Successfully updated lend offer */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LendOfferDTO"];
                };
            };
            /** @description Invalid input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Lend offer not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteLendOfferById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id of the lend offer */
                lend_offer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description This means its ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
