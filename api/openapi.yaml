openapi: 3.0.3
info:
  title: Garagify
  version: 1.0.0
  description: API

tags:
  - name: AuthController
    description: Handles Google token authentication and JWT refresh operations

paths:
  /api/v1/auth/access:
    post:
      tags:
        - AuthController
      summary: Authenticate using a Google token
      operationId: authenticateWithGoogle
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TokenVerificationForm"
      responses:
        "200":
          description: JWT tokens returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenDto"

  /api/v1/auth/refresh:
    post:
      tags:
        - AuthController
      summary: Refresh JWT token
      operationId: refreshToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TokenVerificationForm"
      responses:
        "200":
          description: New JWT tokens returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenDto"

components:
  schemas:
    TokenVerificationForm:
      type: object
      properties:
        token:
          type: string
      required:
        - token

    TokenDto:
      type: object
      properties:
        access:
          type: string
        refresh:
          type: string
      required:
        - access
        - refresh

    ObstacleType:
      type: string
      enum:
        - tree
        - area

    SpotSize:
      type: object
      properties:
        width:
          type: number
        height:
          type: number
      required: [width, height]

    ParkingGroupMeta:
      type: object
      properties:
        id:
          type: string
        spotCount:
          type: integer
        spotSize:
          $ref: "#/components/schemas/SpotSize"
        spotAngle:
          type: number
      required: [id, spotCount, spotSize, spotAngle]

    FabricLine:
      type: object
      description: "Serialized fabric.Line representation"
      properties:
        type:
          type: string
          example: line
        points:
          type: array
          items:
            type: number
        # add more fabric.Line properties as needed

    FabricRect:
      type: object
      description: "Serialized fabric.Rect representation"
      properties:
        type:
          type: string
          example: rect
        left:
          type: number
        top:
          type: number
        width:
          type: number
        height:
          type: number
        # add more fabric.Rect properties as needed

    FabricObject:
      type: object
      description: "Serialized fabric.Object representation"
      properties:
        type:
          type: string
        # add more properties as required for your use-case

    ParkingSpotGroup:
      allOf:
        - $ref: "#/components/schemas/ParkingGroupMeta"
        - type: object
          properties:
            line:
              $ref: "#/components/schemas/FabricLine"
            spots:
              type: array
              items:
                $ref: "#/components/schemas/FabricRect"

    CanvasObstacle:
      type: object
      properties:
        id:
          type: string
        type:
          $ref: "#/components/schemas/ObstacleType"
        fabricObject:
          $ref: "#/components/schemas/FabricObject"
      required: [id, type, fabricObject]

    CanvasZone:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        fabricObject:
          $ref: "#/components/schemas/FabricObject"
      required: [id, fabricObject]

    ParkingMap:
      type: object
      properties:
        zones:
          type: array
          items:
            $ref: "#/components/schemas/CanvasZone"
        obstacles:
          type: array
          items:
            $ref: "#/components/schemas/CanvasObstacle"
        spotGroups:
          type: array
          items:
            $ref: "#/components/schemas/ParkingSpotGroup"
      required: [zones, obstacles, spotGroups]
